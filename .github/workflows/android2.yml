name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
      
    steps:
        - name: test
          run: echo "${{github.event}}"
          
        - name: Deploy Stage
          id: slackapi
          uses: fjogeleit/http-request-action@v1
          with:
            url: 'https://slack.com/api/chat.postMessage'
            contentType: application/x-www-form-urlencoded
            method: 'POST'
            bearerToken: ${{ secrets.SLACK_TOKEN }}
            data: 'channel=C03FYEWR00P&text="dd"'
#             data: 'channel=C03FYEWR00P&attachments=[{"color":"#0000a3","blocks":[{"type":"header","text":{"type":"plain_text","text":":large_green_circle: AAAAndroid Test App","emoji":true}},{"type":"section","text":{"type":"mrkdwn","text":"`version-name:1.9.0` `version-code:200` `branch:test`\n[admin] 첨부파일 등록 <https://google.com|PR/#329>"}},{"type":"section","text":{"type":"mrkdwn","text":"Build with Gradle... <https://google.com|more>"}}]}]'

#         - name: Show Response
#           run: echo '${{ steps.slackapi.outputs.response.ts }}' > response.json; echo `cat response.json`
        
        - name: Show Response
          run: |
            githubjson=$(echo '${{ steps.slackapi.outputs.response.ts }}')
          
          
        - name: Show Response
          run: echo "$AA"
          env:
            AA: ${{fromJSON(githubjson)}}
          
#         - name: Show Response2
#           id: slack
#           run: echo `grep -o '"ts":"[^"]*' response.json | grep -o '[^"]*$'` | cut -d' ' -f1 > out.txt;
#               export SLACK_MSG_TIMESTAMP=`cat out.txt`
          
          
#         - name: START STEP
#           uses: fjogeleit/http-request-action@v1
#           with:
#             url: 'https://slack.com/api/chat.update'
#             contentType: application/x-www-form-urlencoded
#             method: 'POST'
#             bearerToken: ${{ secrets.SLACK_TOKEN }}
#             data: 'channel=C03FYEWR00P&attachments=[{"color":"#0000a3","blocks":[{"type":"header","text":{"type":"plain_text","text":":large_green_circle: AAAAndroid Test App","emoji":true}},{"type":"section","text":{"type":"mrkdwn","text":"`version-name:1.9.0` `version-code:200` `branch:test`\n[admin] 첨부파일 등록 <https://google.com|PR/#329>"}},{"type":"section","text":{"type":"mrkdwn","text":"Build with Gradle... <https://google.com|more>"}}]}]'

#       - name: Slack Notification Start
#         uses: rtCamp/action-slack-notify@v2
#         if: always()
#         env:
#           SLACK_TITLE: ":computer: 빌드 시작  버전s : $($) / 브랜치 : $"
#           SLACK_MESSAGE: "commit : 41424"  
#           SLACK_USERNAME: "Adnroid Github Action"
#           SLACK_CHANNEL: "#notification-android"
#           SLACK_COLOR: "#CCCCCC"
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#           SLACK_FOOTER: ""
#           MSG_MINIMAL: ref,actions url
          
#       - uses: actions/checkout@v3
#       - name: set up JDK 11
#         uses: actions/setup-java@v3
#         with:
#           java-version: '11'
#           distribution: 'temurin'
#           cache: gradle
          
#       - name: Decode Keystore
#         run: echo "${{ secrets.KEY_STORE_BASE64 }}" | base64 -d > app/keystore.jks
  
#       - name: Grant execute permission for gradlew
#         run: chmod +x gradlew
#       - name: Build with Gradle
#         run: ./gradlew app:bundleDev
#         env:
#           KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
#           KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
#           STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}

#       - name: Create service_account.json FROM secrets.SERVICE_ACCOUNT_JSON
#         run: echo '${{ secrets.SERVICE_ACCOUNT_KEY }}' > service_account.json

#       - name: Deploying app at play console
#         uses: r0adkll/upload-google-play@v1
#         with:
#           serviceAccountJson: service_account.json
#           packageName: kr.umaru.videoplayer
#           releaseFiles: app/build/outputs/bundle/DevRelease/*.aab
#           track: internal
#           status: completed
#           inAppUpdatePriority: 2
# #           userFraction: 0.33
          
#       - name: Slack Notification Finish With Success
#         uses: rtCamp/action-slack-notify@v2
#         if: success()
#         env:
#           SLACK_ICON_EMOJI: ":android:"
#           SLACK_TITLE: ":android2: 빌드 성공 / 버전 : $($) / 브랜치 : $"
#           SLACK_USERNAME: "ssm-mobile-builder-bot"
#           SLACK_CHANNEL: "#notification-android"
#           SLACK_COLOR: "#00BFA5"
#           SLACK_MESSAGE: "commit : $\n<$/$/$|파일다운로드>, <$$/|브라우징>"
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

#       - name: Slack Notification Finish With Fail
#         uses: rtCamp/action-slack-notify@v2
#         if: failure()
#         env:
#           SLACK_ICON_EMOJI: ":android:"
#           SLACK_TITLE: ":android2: 빌드 실패 / 버전 : $($) / 브랜치 : $"
#           SLACK_USERNAME: "ssm-mobile-builder-bot"
#           SLACK_CHANNEL: "#notification-android"
#           SLACK_COLOR: "#FF5252"
#           SLACK_MESSAGE: "commit : $"
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
